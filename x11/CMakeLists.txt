INCLUDE (CheckIncludeFiles)
INCLUDE (CheckSymbolExists)
INCLUDE (CheckFunctionExists) 
INCLUDE (CheckTypeSize) 
INCLUDE (CheckCSourceCompiles)

MESSAGE ( STATUS "Searching for X11..." )
FIND_PACKAGE ( X11 REQUIRED )
IF ( X11_FOUND )
    #INCLUDE_DIRECTORIES ( ${X11_INCLUDE_DIR} )
    #LINK_LIBRARIES ( ${X11_LIBRARIES} )
      MESSAGE ( STATUS " X11_INCLUDE_DIR: " ${X11_INCLUDE_DIR} )
      MESSAGE ( STATUS " X11_LIBRARIES: " ${X11_LIBRARIES} )
      MESSAGE ( STATUS " X11_XT: " ${X11_Xt_INCLUDE_PATH} )
      MESSAGE ( STATUS " X11_X11: " ${X11_X11_INCLUDE_PATH} )
ENDIF ( X11_FOUND )

SET (CMAKE_REQUIRED_INCLUDES  ${X11_INCLUDE_DIR}/X11)
CHECK_INCLUDE_FILES (DECkeysym.h HAVE_DECKEYSYM_H)
CHECK_FUNCTION_EXISTS (poll HAVE_POLL)
CHECK_INCLUDE_FILES (Sunkeysym.h HAVE_SUNKEYSYM_H)
CHECK_INCLUDE_FILES (unistd.h HAVE_UNISTD_H)
CHECK_FUNCTION_EXISTS (usleep HAVE_USLEEP)
CHECK_FUNCTION_EXISTS (vsnprintf HAVE_VSNPRINTF)
CHECK_FUNCTION_EXISTS (vsscanf HAVE_VSSCANF)
CHECK_SYMBOL_EXISTS (XK_KP_Begin keysym.h HAVE_XK_KP_BEGIN)
CHECK_SYMBOL_EXISTS (XK_KP_Delete keysym.h HAVE_XK_KP_DELETE)
CHECK_SYMBOL_EXISTS (XK_KP_Down keysym.h HAVE_XK_KP_DOWN)
CHECK_SYMBOL_EXISTS (XK_KP_End keysym.h HAVE_XK_KP_END)
CHECK_SYMBOL_EXISTS (XK_KP_Home keysym.h HAVE_XK_KP_HOME)
CHECK_SYMBOL_EXISTS (XK_KP_Insert keysym.h HAVE_XK_KP_INSERT)
CHECK_SYMBOL_EXISTS (XK_KP_Left keysym.h HAVE_XK_KP_LEFT)
CHECK_SYMBOL_EXISTS (XK_KP_Next keysym.h HAVE_XK_KP_NEXT)
CHECK_SYMBOL_EXISTS (XK_KP_Prior keysym.h HAVE_XK_KP_PRIOR)
CHECK_SYMBOL_EXISTS (XK_KP_Right keysym.h HAVE_XK_KP_RIGHT)
CHECK_SYMBOL_EXISTS (XK_KP_Up keysym.h HAVE_XK_KP_UP)
CHECK_INCLUDE_FILES (xpm.h HAVE_XPM_H)
CHECK_INCLUDE_FILES ("sys/time.h;time.h" TIME_WITH_SYS_TIME)
SET(CMAKE_EXTRA_INCLUDE_FILES Xlib.h)
CHECK_TYPE_SIZE(XPointer XPOINTER_TYPEDEFED)
SET(CMAKE_EXTRA_INCLUDE_FILES) 

CHECK_SYMBOL_EXISTS (NSIG signal.h HAVE_NSIG)
IF (HAVE_NSIG)
    MESSAGE(STATUS "Maximum number of system signals defined by: NSIG")
    SET (PDC_MAX_SIGNALS NSIG)
ELSE(HAVE_NSIG)
    CHECK_SYMBOL_EXISTS (__sys_nsig signal.h HAVE_SYS_NSIG)
    IF (HAVE_SYS_NSIG)
        MESSAGE(STATUS "Maximum number of system signals defined by: __sys_nsig")
        SET (PDC_MAX_SIGNALS __sys_nsig)
    ELSE(HAVE_SYS_NSIG)
        MESSAGE(STATUS "Could not determine maximum number of system signals")
    ENDIF(HAVE_SYS_NSIG)
ENDIF(HAVE_NSIG)
check_c_source_compiles("
    #include <sys/types.h>
    #include <signal.h>
    int main ()
    {
        return *(signal (0, 0)) (0) == 1;
	}
" CMAKE_TEST_SIGNAL_TYPE)
IF (CMAKE_TEST_SIGNAL_TYPE)
    MESSAGE(STATUS "Check for signal handler return type: int")
    SET (RETSIGTYPE int CACHE INTERNAL "Signal return type")
ELSE (CMAKE_TEST_SIGNAL_TYPE)
    MESSAGE(STATUS "Check for signal handler return type: void")
    SET (RETSIGTYPE void CACHE INTERNAL "Signal return type")
ENDIF (CMAKE_TEST_SIGNAL_TYPE)

CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/config_cmake.h.in ${CMAKE_CURRENT_BINARY_DIR}/config.h)
include_directories(${CMAKE_CURRENT_BINARY_DIR})

set(TARGET_NAME XCurses)

file(GLOB PDSOURCES ${PROJECT_SOURCE_DIR}/pdcurses/*.c)
file(GLOB PDHEADERS ${PROJECT_SOURCE_DIR}/*.h)
file(GLOB SOURCES *.c *.h)

add_library(${TARGET_NAME} ${LIB_TYPE} ${SOURCES} ${PDSOURCES} ${PDHEADERS})

target_include_directories(${TARGET_NAME} PUBLIC ${X11_INCLUDE_DIR}/X11)
target_link_libraries(${TARGET_NAME} PUBLIC Xaw Xmu Xt X11 SM ICE Xext Xpm)

install(TARGETS ${TARGET_NAME} DESTINATION lib)
install(FILES ${PDHEADERS} DESTINATION include)
